#!/usr/bin/env ruby

begin
  require 'seriamp/sonamp/auto_power'
rescue LoadError
  $: << File.join(File.dirname(__FILE__), '../lib')
  require 'seriamp/sonamp/auto_power'
end
require 'optparse'
require 'logger'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: sonamp-auto-power options"

  opts.on("--daemonize", "-D", "Daemonize") do
    options[:daemonize] = true
  end

  opts.on("--detector", "-d", "Detector to use: sonamp|yamaha") do |v|
    if %w(sonamp yamaha).include?(v)
      options[:detector] = v.to_sym
    else
      raise "Valid detectors are: sonamp, yamaha"
    end
  end

  opts.on("--log=PATH", "-l", "Path to log file") do |path|
    options[:log_path] = path
  end

  opts.on("--sonamp-url=URL", "-s", "Path to Sonamp webapp URL") do |v|
    options[:sonamp_url] = v
  end

  opts.on("--state=PATH", "-f", "Path to state file") do |path|
    options[:state_path] = path
  end

  opts.on("--ttl=TTL", "-t", "Delay in seconds for turning amplifier off after receiver is detected off") do |v|
    options[:ttl] = Integer(v)
  end

  opts.on("--yamaha-url=URL", "-y", "Path to Yamaha webapp URL") do |v|
    options[:yamaha_url] = v
  end

end.parse!

logger = Logger.new(STDERR)

runner = Seriamp::Sonamp::AutoPower.new(
  logger: logger,
  detector: options[:detector],
  sonamp_url: options[:sonamp_url],
  state_path: options[:state_path],
  ttl: options[:ttl],
  yamaha_url: options[:yamaha_url],
)

if options[:daemonize]
  Process.daemonize
end

runner.run
