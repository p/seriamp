#!/usr/bin/env ruby

# frozen_string_literal: true

begin
  require 'yamaha'
rescue LoadError
  $: << File.join(File.dirname(__FILE__), '../lib')
  require 'yamaha'
end
require 'optparse'
require 'logger'
require 'pp'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: yamaha [-d device] command arg..."

  opts.on("-d", "--device DEVICE", "TTY to use (default autodetect)") do |v|
    options[:device] = v
  end
end.parse!

logger = Logger.new(STDERR)
client = Yamaha::Client.new(options[:device], logger: logger)

cmd = ARGV.shift
unless cmd
  raise ArgumentError, "No command given"
end

def parse_on_off(value)
  case value&.downcase
  when '1', 'on', 'yes', 'true'
    true
  when '0', 'off', 'no', 'value'
    false
  else
    raise ArgumentError, "Invalid on/off value: #{value}"
  end
end

case cmd
when 'detect'
  device = Yamaha::Client.detect_device(*ARGV, logger: logger)
  if device
    puts device
    exit 0
  else
    STDERR.puts("Yamaha receiver not found")
    exit 3
  end
when 'power'
  which = ARGV.shift&.downcase
  if %w(main zone2 zone3).include?(which)
    method = "set_#{which}_power"
    state = parse_on_off(ARGV.shift)
  else
    method = 'set_power'
    state = parse_on_off(which)
  end
  client.public_send(method, state)
when 'vol'
  volume = ARGV.shift.to_i
  p client.set_zone2_volume(volume)
  p client.set_subwoofer_level(volume)
  p client.get_zone2_volume_text
  p client.get_zone3_volume_text
when 'input'
  which = ARGV.shift&.downcase
  if %w(main zone2 zone3).include?(which)
    method = "set_#{which}_input"
    input = ARGV.shift
  else
    method = 'set_main_input'
    input = which
  end
  client.public_send(method, input)
when 'status'
  pp client.last_status
when 'status_string'
  puts client.last_status_string
when 'test'
  client.set_power(false)
  [true, false].each do |main_state|
    [true, false].each do |zone2_state|
      [true, false].each do |zone3_state|
        client.set_main_power(main_state)
        client.set_zone2_power(zone2_state)
        client.set_zone3_power(zone3_state)
        puts "#{main_state ?1:0} #{zone2_state ?1:0} #{zone3_state ?1:0} #{client.status[:power]}"
      end
    end
  end
else
  raise ArgumentError, "Unknown command: #{cmd}"
end
